{"ast":null,"code":"const CLIENT_ID = '01e7bd2c3cd94726ac99f8dab2c7d06b';\nconst CLIENT_SECRET = '41ca7673dacf4a3fa88450fc6490c4d5';\n\n// Save token here so we don't ask Spotify every time\nlet savedToken = null;\nlet tokenExpires = null;\nexport const getAccessToken = async () => {\n  // Do we already have a valid token? Use it!\n  const tokenStillGood = savedToken && tokenExpires && Date.now() < tokenExpires;\n  if (tokenStillGood) {\n    console.log(' Using saved token');\n    return savedToken;\n  }\n\n  // We need a new token from Spotify\n  console.log(' Getting new token...');\n  try {\n    // Ask Spotify for a token\n    const response = await fetch('https://accounts.spotify.com/api/token', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded',\n        'Authorization': 'Basic ' + btoa(CLIENT_ID + ':' + CLIENT_SECRET)\n      },\n      body: 'grant_type=client_credentials'\n    });\n\n    // Did Spotify say no?\n    if (!response.ok) {\n      throw new Error('Spotify rejected our request');\n    }\n\n    // Get the token from Spotify's response\n    const data = await response.json();\n\n    // Save the token for next time\n    savedToken = data.access_token;\n    tokenExpires = Date.now() + 55 * 60 * 1000; // Good for 55 minutes\n\n    console.log(' Got token from Spotify!');\n    return savedToken;\n  } catch (error) {\n    console.error(' Failed to get token:', error.message);\n  }\n};","map":{"version":3,"names":["CLIENT_ID","CLIENT_SECRET","savedToken","tokenExpires","getAccessToken","tokenStillGood","Date","now","console","log","response","fetch","method","headers","btoa","body","ok","Error","data","json","access_token","error","message"],"sources":["/Users/wendyzhan/DynamicWebFolder/DynamicWeb2025/Midterm/musicmoodtest/src/services/spotifyAuth.js"],"sourcesContent":["const CLIENT_ID = '01e7bd2c3cd94726ac99f8dab2c7d06b'\nconst CLIENT_SECRET = '41ca7673dacf4a3fa88450fc6490c4d5'\n\n// Save token here so we don't ask Spotify every time\nlet savedToken = null\nlet tokenExpires = null\n\nexport const getAccessToken = async () => {\n  \n  // Do we already have a valid token? Use it!\n  const tokenStillGood = savedToken && tokenExpires && Date.now() < tokenExpires\n  if (tokenStillGood) {\n    console.log(' Using saved token')\n    return savedToken\n  }\n\n  // We need a new token from Spotify\n  console.log(' Getting new token...')\n  \n  try {\n    // Ask Spotify for a token\n    const response = await fetch('https://accounts.spotify.com/api/token', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded',\n        'Authorization': 'Basic ' + btoa(CLIENT_ID + ':' + CLIENT_SECRET)\n      },\n      body: 'grant_type=client_credentials'\n    })\n\n    // Did Spotify say no?\n    if (!response.ok) {\n      throw new Error('Spotify rejected our request')\n    }\n\n    // Get the token from Spotify's response\n    const data = await response.json()\n    \n    // Save the token for next time\n    savedToken = data.access_token\n    tokenExpires = Date.now() + (55 * 60 * 1000) // Good for 55 minutes\n    \n    console.log(' Got token from Spotify!')\n    return savedToken\n    \n  } catch (error) {\n    console.error(' Failed to get token:', error.message)\n\n  }\n}"],"mappings":"AAAA,MAAMA,SAAS,GAAG,kCAAkC;AACpD,MAAMC,aAAa,GAAG,kCAAkC;;AAExD;AACA,IAAIC,UAAU,GAAG,IAAI;AACrB,IAAIC,YAAY,GAAG,IAAI;AAEvB,OAAO,MAAMC,cAAc,GAAG,MAAAA,CAAA,KAAY;EAExC;EACA,MAAMC,cAAc,GAAGH,UAAU,IAAIC,YAAY,IAAIG,IAAI,CAACC,GAAG,CAAC,CAAC,GAAGJ,YAAY;EAC9E,IAAIE,cAAc,EAAE;IAClBG,OAAO,CAACC,GAAG,CAAC,oBAAoB,CAAC;IACjC,OAAOP,UAAU;EACnB;;EAEA;EACAM,OAAO,CAACC,GAAG,CAAC,uBAAuB,CAAC;EAEpC,IAAI;IACF;IACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,wCAAwC,EAAE;MACrEC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE,mCAAmC;QACnD,eAAe,EAAE,QAAQ,GAAGC,IAAI,CAACd,SAAS,GAAG,GAAG,GAAGC,aAAa;MAClE,CAAC;MACDc,IAAI,EAAE;IACR,CAAC,CAAC;;IAEF;IACA,IAAI,CAACL,QAAQ,CAACM,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,8BAA8B,CAAC;IACjD;;IAEA;IACA,MAAMC,IAAI,GAAG,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC;;IAElC;IACAjB,UAAU,GAAGgB,IAAI,CAACE,YAAY;IAC9BjB,YAAY,GAAGG,IAAI,CAACC,GAAG,CAAC,CAAC,GAAI,EAAE,GAAG,EAAE,GAAG,IAAK,EAAC;;IAE7CC,OAAO,CAACC,GAAG,CAAC,0BAA0B,CAAC;IACvC,OAAOP,UAAU;EAEnB,CAAC,CAAC,OAAOmB,KAAK,EAAE;IACdb,OAAO,CAACa,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAACC,OAAO,CAAC;EAEvD;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}