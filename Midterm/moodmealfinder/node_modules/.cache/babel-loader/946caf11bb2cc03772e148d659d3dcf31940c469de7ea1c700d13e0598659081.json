{"ast":null,"code":"import { getAccessToken } from './spotifyAuth';\n\n// What to search for each mood\nconst MOOD_SEARCHES = {\n  pop: 'genre:pop',\n  acoustic: 'genre:acoustic',\n  rock: 'genre:rock',\n  ambient: 'chill ambient relaxing',\n  romance: 'love romantic',\n  classical: 'genre:classical'\n};\n\n/**\n * Get music tracks from Spotify based on mood\n */\nexport const getRecommendations = async (genres, limit = 20) => {\n  try {\n    // 1. Login to Spotify and get permission\n    const token = await getAccessToken();\n\n    // 2. Get the mood name (e.g., \"pop\", \"rock\")\n    const mood = Array.isArray(genres) ? genres[0] : genres;\n\n    // 3. Find what to search for this mood\n    const searchTerm = MOOD_SEARCHES[mood] || mood;\n\n    // 4. Build the Spotify search link\n    const spotifyUrl = `https://api.spotify.com/v1/search?q=${encodeURIComponent(searchTerm)}&type=track&limit=${limit}`;\n    console.log('üîç Searching for:', searchTerm);\n\n    // 5. Ask Spotify for tracks\n    const response = await fetch(spotifyUrl, {\n      headers: {\n        'Authorization': `Bearer ${token}`\n      }\n    });\n\n    // 6. Check if Spotify gave us results\n    if (!response.ok) {\n      console.error(' Spotify search failed');\n      return []; // Return empty list\n    }\n\n    // 7. Get the tracks from Spotify's response\n    const data = await response.json();\n    const tracks = data.tracks.items;\n    console.log(`Found ${tracks.length} songs!`);\n    return tracks;\n  } catch (error) {\n    console.error(' Something went wrong:', error.message);\n    return []; // Return empty list if anything fails\n  }\n};","map":{"version":3,"names":["getAccessToken","MOOD_SEARCHES","pop","acoustic","rock","ambient","romance","classical","getRecommendations","genres","limit","token","mood","Array","isArray","searchTerm","spotifyUrl","encodeURIComponent","console","log","response","fetch","headers","ok","error","data","json","tracks","items","length","message"],"sources":["/Users/wendyzhan/DynamicWebFolder/DynamicWeb2025/Midterm/musicmoodtest/src/services/spotify.js"],"sourcesContent":["import { getAccessToken } from './spotifyAuth'\n\n// What to search for each mood\nconst MOOD_SEARCHES = {\n  pop: 'genre:pop',\n  acoustic: 'genre:acoustic',\n  rock: 'genre:rock',\n  ambient: 'chill ambient relaxing',\n  romance: 'love romantic',\n  classical: 'genre:classical'\n}\n\n/**\n * Get music tracks from Spotify based on mood\n */\nexport const getRecommendations = async (genres, limit = 20) => {\n  try {\n    // 1. Login to Spotify and get permission\n    const token = await getAccessToken()\n    \n    // 2. Get the mood name (e.g., \"pop\", \"rock\")\n    const mood = Array.isArray(genres) ? genres[0] : genres\n    \n    // 3. Find what to search for this mood\n    const searchTerm = MOOD_SEARCHES[mood] || mood\n    \n    // 4. Build the Spotify search link\n    const spotifyUrl = `https://api.spotify.com/v1/search?q=${encodeURIComponent(searchTerm)}&type=track&limit=${limit}`\n    \n    console.log('üîç Searching for:', searchTerm)\n    \n    // 5. Ask Spotify for tracks\n    const response = await fetch(spotifyUrl, {\n      headers: {\n        'Authorization': `Bearer ${token}`\n      }\n    })\n\n    // 6. Check if Spotify gave us results\n    if (!response.ok) {\n      console.error(' Spotify search failed')\n      return [] // Return empty list\n    }\n\n    // 7. Get the tracks from Spotify's response\n    const data = await response.json()\n    const tracks = data.tracks.items\n    \n    console.log(`Found ${tracks.length} songs!`)\n    return tracks\n    \n  } catch (error) {\n    console.error(' Something went wrong:', error.message)\n    return [] // Return empty list if anything fails\n  }\n}"],"mappings":"AAAA,SAASA,cAAc,QAAQ,eAAe;;AAE9C;AACA,MAAMC,aAAa,GAAG;EACpBC,GAAG,EAAE,WAAW;EAChBC,QAAQ,EAAE,gBAAgB;EAC1BC,IAAI,EAAE,YAAY;EAClBC,OAAO,EAAE,wBAAwB;EACjCC,OAAO,EAAE,eAAe;EACxBC,SAAS,EAAE;AACb,CAAC;;AAED;AACA;AACA;AACA,OAAO,MAAMC,kBAAkB,GAAG,MAAAA,CAAOC,MAAM,EAAEC,KAAK,GAAG,EAAE,KAAK;EAC9D,IAAI;IACF;IACA,MAAMC,KAAK,GAAG,MAAMX,cAAc,CAAC,CAAC;;IAEpC;IACA,MAAMY,IAAI,GAAGC,KAAK,CAACC,OAAO,CAACL,MAAM,CAAC,GAAGA,MAAM,CAAC,CAAC,CAAC,GAAGA,MAAM;;IAEvD;IACA,MAAMM,UAAU,GAAGd,aAAa,CAACW,IAAI,CAAC,IAAIA,IAAI;;IAE9C;IACA,MAAMI,UAAU,GAAG,uCAAuCC,kBAAkB,CAACF,UAAU,CAAC,qBAAqBL,KAAK,EAAE;IAEpHQ,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEJ,UAAU,CAAC;;IAE5C;IACA,MAAMK,QAAQ,GAAG,MAAMC,KAAK,CAACL,UAAU,EAAE;MACvCM,OAAO,EAAE;QACP,eAAe,EAAE,UAAUX,KAAK;MAClC;IACF,CAAC,CAAC;;IAEF;IACA,IAAI,CAACS,QAAQ,CAACG,EAAE,EAAE;MAChBL,OAAO,CAACM,KAAK,CAAC,wBAAwB,CAAC;MACvC,OAAO,EAAE,EAAC;IACZ;;IAEA;IACA,MAAMC,IAAI,GAAG,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC;IAClC,MAAMC,MAAM,GAAGF,IAAI,CAACE,MAAM,CAACC,KAAK;IAEhCV,OAAO,CAACC,GAAG,CAAC,SAASQ,MAAM,CAACE,MAAM,SAAS,CAAC;IAC5C,OAAOF,MAAM;EAEf,CAAC,CAAC,OAAOH,KAAK,EAAE;IACdN,OAAO,CAACM,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAACM,OAAO,CAAC;IACtD,OAAO,EAAE,EAAC;EACZ;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}