{"ast":null,"code":"import { getAccessToken } from './spotifyAuth';\n\n// 搜索音乐\nexport const searchTracks = async (query, limit = 20) => {\n  try {\n    const token = await getAccessToken();\n    const response = await fetch(`https://api.spotify.com/v1/search?q=${encodeURIComponent(query)}&type=track&limit=${limit}`, {\n      headers: {\n        'Authorization': `Bearer ${token}`\n      }\n    });\n    if (!response.ok) {\n      throw new Error('Search failed');\n    }\n    const data = await response.json();\n    return data.tracks.items;\n  } catch (error) {\n    console.error('Error searching tracks:', error);\n    return [];\n  }\n};\n\n// 获取推荐音乐\nexport const getRecommendations = async (genres, limit = 20) => {\n  try {\n    const token = await getAccessToken();\n    const genresString = genres.join(',');\n    const response = await fetch(`https://api.spotify.com/v1/recommendations?seed_genres=${genresString}&limit=${limit}`, {\n      headers: {\n        'Authorization': `Bearer ${token}`\n      }\n    });\n    if (!response.ok) {\n      throw new Error('Recommendations failed');\n    }\n    const data = await response.json();\n    return data.tracks;\n  } catch (error) {\n    console.error('Error getting recommendations:', error);\n    return [];\n  }\n};\n\n// 获取可用的音乐类型列表\nexport const getAvailableGenres = async () => {\n  try {\n    const token = await getAccessToken();\n    const response = await fetch('https://api.spotify.com/v1/recommendations/available-genre-seeds', {\n      headers: {\n        'Authorization': `Bearer ${token}`\n      }\n    });\n    if (!response.ok) {\n      throw new Error('Failed to get genres');\n    }\n    const data = await response.json();\n    return data.genres;\n  } catch (error) {\n    console.error('Error getting genres:', error);\n    return [];\n  }\n};","map":{"version":3,"names":["getAccessToken","searchTracks","query","limit","token","response","fetch","encodeURIComponent","headers","ok","Error","data","json","tracks","items","error","console","getRecommendations","genres","genresString","join","getAvailableGenres"],"sources":["/Users/wendyzhan/DynamicWebFolder/DynamicWeb2025/Midterm/musicmoodtracker/src/services/spotify.js"],"sourcesContent":["import {getAccessToken} from './spotifyAuth'\n\n// 搜索音乐\nexport const searchTracks = async (query, limit = 20) => {\n  try {\n    const token = await getAccessToken()\n    \n    const response = await fetch(\n      `https://api.spotify.com/v1/search?q=${encodeURIComponent(query)}&type=track&limit=${limit}`,\n      {\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      }\n    )\n\n    if (!response.ok) {\n      throw new Error('Search failed')\n    }\n\n    const data = await response.json()\n    return data.tracks.items\n  } catch (error) {\n    console.error('Error searching tracks:', error)\n    return []\n  }\n}\n\n// 获取推荐音乐\nexport const getRecommendations = async (genres, limit = 20) => {\n  try {\n    const token = await getAccessToken()\n    \n    const genresString = genres.join(',')\n    const response = await fetch(\n      `https://api.spotify.com/v1/recommendations?seed_genres=${genresString}&limit=${limit}`,\n      {\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      }\n    )\n\n    if (!response.ok) {\n      throw new Error('Recommendations failed')\n    }\n\n    const data = await response.json()\n    return data.tracks\n  } catch (error) {\n    console.error('Error getting recommendations:', error)\n    return []\n  }\n}\n\n// 获取可用的音乐类型列表\nexport const getAvailableGenres = async () => {\n  try {\n    const token = await getAccessToken()\n    \n    const response = await fetch(\n      'https://api.spotify.com/v1/recommendations/available-genre-seeds',\n      {\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      }\n    )\n\n    if (!response.ok) {\n      throw new Error('Failed to get genres')\n    }\n\n    const data = await response.json()\n    return data.genres\n  } catch (error) {\n    console.error('Error getting genres:', error)\n    return []\n  }\n}"],"mappings":"AAAA,SAAQA,cAAc,QAAO,eAAe;;AAE5C;AACA,OAAO,MAAMC,YAAY,GAAG,MAAAA,CAAOC,KAAK,EAAEC,KAAK,GAAG,EAAE,KAAK;EACvD,IAAI;IACF,MAAMC,KAAK,GAAG,MAAMJ,cAAc,CAAC,CAAC;IAEpC,MAAMK,QAAQ,GAAG,MAAMC,KAAK,CAC1B,uCAAuCC,kBAAkB,CAACL,KAAK,CAAC,qBAAqBC,KAAK,EAAE,EAC5F;MACEK,OAAO,EAAE;QACP,eAAe,EAAE,UAAUJ,KAAK;MAClC;IACF,CACF,CAAC;IAED,IAAI,CAACC,QAAQ,CAACI,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,eAAe,CAAC;IAClC;IAEA,MAAMC,IAAI,GAAG,MAAMN,QAAQ,CAACO,IAAI,CAAC,CAAC;IAClC,OAAOD,IAAI,CAACE,MAAM,CAACC,KAAK;EAC1B,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;IAC/C,OAAO,EAAE;EACX;AACF,CAAC;;AAED;AACA,OAAO,MAAME,kBAAkB,GAAG,MAAAA,CAAOC,MAAM,EAAEf,KAAK,GAAG,EAAE,KAAK;EAC9D,IAAI;IACF,MAAMC,KAAK,GAAG,MAAMJ,cAAc,CAAC,CAAC;IAEpC,MAAMmB,YAAY,GAAGD,MAAM,CAACE,IAAI,CAAC,GAAG,CAAC;IACrC,MAAMf,QAAQ,GAAG,MAAMC,KAAK,CAC1B,0DAA0Da,YAAY,UAAUhB,KAAK,EAAE,EACvF;MACEK,OAAO,EAAE;QACP,eAAe,EAAE,UAAUJ,KAAK;MAClC;IACF,CACF,CAAC;IAED,IAAI,CAACC,QAAQ,CAACI,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,wBAAwB,CAAC;IAC3C;IAEA,MAAMC,IAAI,GAAG,MAAMN,QAAQ,CAACO,IAAI,CAAC,CAAC;IAClC,OAAOD,IAAI,CAACE,MAAM;EACpB,CAAC,CAAC,OAAOE,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;IACtD,OAAO,EAAE;EACX;AACF,CAAC;;AAED;AACA,OAAO,MAAMM,kBAAkB,GAAG,MAAAA,CAAA,KAAY;EAC5C,IAAI;IACF,MAAMjB,KAAK,GAAG,MAAMJ,cAAc,CAAC,CAAC;IAEpC,MAAMK,QAAQ,GAAG,MAAMC,KAAK,CAC1B,kEAAkE,EAClE;MACEE,OAAO,EAAE;QACP,eAAe,EAAE,UAAUJ,KAAK;MAClC;IACF,CACF,CAAC;IAED,IAAI,CAACC,QAAQ,CAACI,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,sBAAsB,CAAC;IACzC;IAEA,MAAMC,IAAI,GAAG,MAAMN,QAAQ,CAACO,IAAI,CAAC,CAAC;IAClC,OAAOD,IAAI,CAACO,MAAM;EACpB,CAAC,CAAC,OAAOH,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;IAC7C,OAAO,EAAE;EACX;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}